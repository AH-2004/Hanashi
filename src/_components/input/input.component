var i=`<label id="inputLabel" for="input" hidden></label>
<input
  id="input"
  part="input"
  name="input"
  type="text"
  spellcheck="false"
  class="noselect">
</input>
`;var o=`* {
	box-sizing: border-box;
	padding: 0px;
	margin: 0px;
} /* Fixing default html stuff */

.noselect {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    outline: none;
}

input {
	width: 100%;
	height: 100%;
	text-align: center;
	border: none;
	font-family: system-ui;
	color: var(--input-component-fg);
	background-color: var(--input-component-bg);
	border-radius: var(--input-component-radius);
	transition: background-color 0.1s;
}

input:focus {
	background-color: var(--input-component-focus-bg);
}

input::selection {
	background-color: var(--input-component-sel);
	border-radius: var(--input-component-radius);;
}
`;var a=class extends HTMLElement{static get observedAttributes(){return["title","placeholder","autocomplete","autofocus"]}constructor(){super(),this.attachShadow({mode:"open"});let e=document.createElement("template");e.innerHTML=`<style>${o}</style>${i}`,this.shadowRoot.appendChild(e.content.cloneNode(!0)),this.elems={input:this.shadowRoot.getElementById("input"),inputLabel:this.shadowRoot.getElementById("inputLabel")},this.attribs={title:{value:null,usages:[{element:this.elems.input,attrib:null,disabled:!1,format:null,extra:null},{element:this.elems.inputLabel,attrib:"innerHTML",disabled:!1,format:null,extra:null}]},placeholder:{value:null,usages:[{element:this.elems.input,attrib:null,disabled:!1,format:null,extra:null}]},autocomplete:{value:null,usages:[{element:this.elems.input,attrib:null,disabled:!1,format:null,extra:null}]},autofocus:{value:null,usages:[{element:this.elems.input,attrib:null,disabled:!1,format:null,extra:function(l,t,n){t=="true"&&this.element.focus()}}]}},this.handlers={input:[{element:this.elems.input,handler:l=>{console.log(l.target.value)}}]}}connectedCallback(){Object.entries(this.handlers).forEach(([e,l])=>{l.forEach(t=>{t.element.addEventListener(e,t.handler)})})}attributeChangedCallback(e,l,t){this.attribs[e]!=null&&(this.attribs[e].value=t,this.attribs[e].usages.forEach(n=>{n.disabled||(n.element[n.attrib?n.attrib:e]=n.format?n.format(t):t),n.extra&&n.extra(e,t,this.attribs)}))}disconnectedCallback(){Object.entries(this.handlers).forEach(([e,l])=>{l.forEach(t=>{t.element.removeEventListener(e,t.handler)})})}};customElements.define("input-component",a);
