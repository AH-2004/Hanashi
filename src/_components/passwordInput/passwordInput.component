var a=`<span part="span" class="noselect">
  <label id="inputLabel" for="input" hidden></label>
  <input id="input" name="input" part="input" type="password" spellcheck="false" class="noselect">
  <label id="buttonLabel" for="button" hidden></label>
  <button id="button" name="button" part="button" class="noselect">
	<img id="icon" class="noselect" draggable="false">
  </button>
</span>
`;var i=`* {
	box-sizing: border-box;
	padding: 0px;
	margin: 0px;
} /* Fixing default html stuff */

.noselect {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    outline: none;
}

span {
	width: 100%;
	height: 100%;
	display: inline-block;
	display: flex;
	justify-content: left;
	align-items: center;
	flex-direction: row;
}

input, button {
	height: 100%;
	text-align: center;
	border: none;
	font-family: system-ui;
	color: var(--password-input-component-fg);
	background-color: var(--password-input-component-bg);
	border-radius: var(--password-input-component-radius);
	transition: background-color 0.1s;
}

input:focus {
	background-color: var(--password-input-component-bg-2);
}

input {
	width: 80%;
	margin-right: var(--password-input-component-margin);
}

input::selection {
	background-color: var(--password-input-component-sel);
}

button {
	width: 20%;
	cursor: pointer;
	display: flex;
	justify-content: center;
	align-items: center;
	margin-left: var(--password-input-component-margin);
}

button img {
	width: 2.5em;
}

button:hover, button:focus {
	background-color: var(--password-input-component-bg-2);
}

button:active {
	background-color: var(--button-component-bg);
}
`;var s=class extends HTMLElement{static get observedAttributes(){return["title","placeholder","srcon","srcoff","srcstate"]}constructor(){super(),this.attachShadow({mode:"open"});let l=document.createElement("template");l.innerHTML=`<style>${i}</style>${a}`,this.shadowRoot.appendChild(l.content.cloneNode(!0)),this.elems={input:this.shadowRoot.getElementById("input"),button:this.shadowRoot.getElementById("button"),icon:this.shadowRoot.getElementById("icon"),inputLabel:this.shadowRoot.getElementById("inputLabel"),buttonLabel:this.shadowRoot.getElementById("buttonLabel")},this.attribs={title:{value:null,usages:[{element:this.elems.input,attrib:null,disabled:!1,format:null,extra:null},{element:this.elems.button,attrib:null,disabled:!1,format:n=>`Show/Hide ${n}`,extra:null},{element:this.elems.inputLabel,attrib:"innerHTML",disabled:!1,format:null,extra:null},{element:this.elems.buttonLabel,attrib:"innerHTML",disabled:!1,format:n=>`Show/Hide ${n}`,extra:null}]},placeholder:{value:null,usages:[{element:this.elems.input,attrib:null,disabled:!1,format:null,extra:null}]},srcon:{value:null,usages:[{element:this.elems.icon,attrib:null,format:null,disabled:!0,extra:function(n,t,e){e.srcstate.value=="on"&&(this.element.src=t)}}]},srcoff:{value:null,usages:[{element:this.elems.icon,attrib:null,format:null,disabled:!0,extra:function(n,t,e){e.srcstate.value=="off"&&(this.element.src=t)}}]},srcstate:{value:"off",usages:[{element:this.elems.icon,attrib:null,format:null,disabled:!0,extra:function(n,t,e){let o=t=="on"?e.srcon.value:e.srcoff.value;o!=null&&(this.element.src=o)}}]}},this.handlers={input:[{element:this.elems.input,handler:n=>{console.log(n.target.value)}}],click:[{element:this.elems.button,handler:n=>{this.attribs.srcstate.value=this.attribs.srcstate.value=="on"?"off":"on";let t=this.attribs.srcstate.value=="on"?this.attribs.srcon.value:this.attribs.srcoff.value;t!=null&&(this.elems.icon.src=t)}}]}}connectedCallback(){Object.entries(this.handlers).forEach(([l,n])=>{n.forEach(t=>{t.element.addEventListener(l,t.handler)})})}attributeChangedCallback(l,n,t){this.attribs[l]!=null&&(this.attribs[l].value=t,this.attribs[l].usages.forEach(e=>{e.disabled||(e.element[e.attrib?e.attrib:l]=e.format?e.format(t):t),e.extra&&e.extra(l,t,this.attribs)}))}disconnectedCallback(){Object.entries(this.handlers).forEach(([l,n])=>{n.forEach(t=>{t.element.removeEventListener(l,t.handler)})})}};customElements.define("password-input-component",s);
